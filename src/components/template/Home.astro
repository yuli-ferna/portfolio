---
import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import DecryptedText from "../molecules/DecryptedText";
import BlurText from "../molecules/BlurText";
import ContactLinks from "../molecules/ContactLinks.astro";
import SplitText from "../SplitText";
import { motion } from "motion/react";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div
  class="flex flex-col-reverse md:flex-row items-center justify-around lg:gap-20 w-85 md:w-full size-4 h-fit md:h-screen relative"
>
  <div
    class="h-screen flex flex-col items-center justify-center gap-14 md:gap-7 md:max-w-100 md:items-start"
  >
    <div class="transform-3d -rotate-10 hidden md:block">
      <DecryptedText
        client:load
        className="title text-lg "
        text={`${t("home")["hello"]} ✨`}
        animateOn="view"
        revealDirection="start"
        speed={60}
        sequential
      />
    </div>
    <div>
      <BlurText
        client:load
        text={t("home")["description"]}
        className="title text-xl mt-6 justify-center md:justify-start md:text-start"
        delay={50}
        animateBy="words"
        direction="top"
      />
    </div>

    <div class="w-full flex justify-center relative">
      <motion.a
        client:load
        href={t("home")["cvLink"]}
        className="cursor-pointer"
        animate={{
          y: [0, 20, 0],
          transition: { duration: 1, repeat: Infinity, ease: "easeInOut" },
        }}
        target="_blank"
      >
        <SplitText
          client:load
          text="CV"
          className="title absolute top-3 md:top-7 left-0 right-0 text-[80px]"
          delay={200}
          duration={4}
          ease="elastic.out(1,0.3)"
          splitType="chars"
          from={{ opacity: 0, y: 40 }}
          to={{ opacity: 1, y: 0 }}
          threshold={0.1}
          rootMargin="-100px"
        />
        <svg
          width="208"
          height="200"
          viewBox="0 0 208 200"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g filter="url(#filter0_d_172_1046)">
            <path
              d="M194.437 166.656H13.5V147.594H4V176.156H13.5V185.719H194.437V176.156H204V147.594H194.437V166.656Z"
              fill="var(--color-text-primary)"></path>
            <path
              d="M184.938 128.531H194.438V147.594H184.938V128.531ZM89.6875 147.594H118.25V157.094H89.6875V147.594ZM32.5625 14.2812H175.438V23.7812H32.5625V14.2812Z"
              fill="var(--color-text-primary)"></path>
            <path
              d="M184.937 128.531V23.7812H175.437V119.031H32.5625V23.7812H23.0625V128.531H184.937ZM13.5 128.531H23.0625V147.594H13.5V128.531Z"
              fill="var(--color-text-primary)"></path>
          </g>
          <defs>
            <filter
              id="filter0_d_172_1046"
              x="0"
              y="0"
              width="208"
              height="208"
              filterUnits="userSpaceOnUse"
              color-interpolation-filters="sRGB"
            >
              <feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood>
              <feColorMatrix
                in="SourceAlpha"
                type="matrix"
                values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                result="hardAlpha"></feColorMatrix>
              <feOffset dy="4"></feOffset>
              <feGaussianBlur stdDeviation="2"></feGaussianBlur>
              <feComposite in2="hardAlpha" operator="out"></feComposite>
              <feColorMatrix
                type="matrix"
                values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"
              ></feColorMatrix>
              <feBlend
                mode="normal"
                in2="BackgroundImageFix"
                result="effect1_dropShadow_172_1046"></feBlend>
              <feBlend
                mode="normal"
                in="SourceGraphic"
                in2="effect1_dropShadow_172_1046"
                result="shape"></feBlend>
            </filter>
          </defs>
        </svg>
      </motion.a>
    </div>
  </div>
  <div
    class="h-screen md:h-fit flex flex-col items-center justify-center gap-8 md:gap-8 w-full md:w-100 size-4 relative"
  >
    <div class="transform-3d -rotate-10 md:hidden mb-10">
      <DecryptedText
        client:load
        className="title text-lg "
        text={`${t("home")["hello"]} ✨`}
        animateOn="view"
        revealDirection="start"
        speed={60}
        sequential
      />
    </div>
    <div
      class="image-home bg-container-primary w-55 h-55 md:w-80 md:h-80 shadow-lg border-1 border-secondary rounded relative"
    >
      <!-- TO DO Animate this svg -->
      <motion.img
        client:only="react"
        className="h-fit w-fit absolute mix-blend-normal bottom-0"
        src={"/image_home.png"}
        alt="Image avatar"
      />
      <motion.img
        client:only="react"
        initial={{
          bottom: "6px", left: "6px"
        }}
        whileInView={{
          bottom: [0, "6px", 0], left: [0, "6px", 0], transition: { repeat: Infinity, duration: 8 }
        }}
        className="h-fit w-fit absolute opacity-50 mix-blend-lighten bottom-1 left-1"
        src={"/image_home_red.png"}
        alt="Image avatar red"
      />
      <motion.img
        client:only="react"
        initial={{
          bottom: "-6px", left: "-6px", mixBlendMode: "lighten"
        }}
        whileInView={{
          bottom: [0, "-6px", 0], left: [0, "-6px", 0], mixBlendMode: ["normal", "lighten"], transition: { repeat: Infinity, duration: 8 }
        }}
        className="h-fit w-fit absolute opacity-50 -bottom-1 -left-1"
        src={"/image_home_blue.png"}
        alt="Image avatar blue"
      />
      <!-- <motion.img
        client:only="react"
        className="h-fit w-fit absolute opacity-50 mix-blend-lighten bottom-0"
        src={"/image_home_green.png"}
        alt="Image avatar green"
      /> -->
    </div>
    <div class="title text-lg">
      {
        t("home")["titles"] &&
          t("home")["titles"].map((title) => {
            return (
              <>
                <DecryptedText
                  client:load
                  className="title text-lg"
                  text={title}
                  animateOn="view"
                  revealDirection="start"
                  speed={100}
                  sequential
                />
                <br />
              </>
            );
          })
      }
    </div>
    <ContactLinks />
  </div>
</div>
