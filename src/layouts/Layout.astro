---
import Logo from "../components/atoms/icons/Logo";
import LanguagePicker from "../components/molecules/LanguagePicker";
import Navbar from "../components/organisms/Navbar";
import ThemeIcon from "../components/molecules/ThemeIcon.astro";
import { getLangFromUrl } from "../i18n/utils";
import { ClientRouter } from "astro:transitions";
const lang = getLangFromUrl(Astro.url);
---

<!doctype html>
<html lang={lang}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Yuliana</title>
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Pixelify+Sans:wght@400..700&display=swap"
			rel="stylesheet"
		/>
		<ClientRouter />
	</head>
	<body class="bg-container-paper text-primary">
		<div
			class="flex justify-end items-center p-4 gap-4 fixed top-0 right-0 z-10"
		>
			<ThemeIcon />
			<LanguagePicker client:load />
		</div>
		<div class="fixed top-0 left-0 p-5">
			<Logo />
		</div>
		<slot />
		<div
			class="fixed bottom-0 left-0 right-0 w-screen flex justify-center items-center p-4"
		>
			<Navbar client:only="react" />
		</div>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
		font-family: "Inter", sans-serif !important;
	}
</style>

<script>
	let prevRatio = {};

	// Set things up
	window.addEventListener(
		"load",
		(event) => {
			// window.scrollTo(0, 0); // TO DO: Uncomment
			const elements = document.getElementsByTagName("section");
			for (let i = 0; i < elements.length; i++) {
				const boxElement = elements[i];
				prevRatio[boxElement.id] = 0.0; // Initialize the previous ratio for each section
				createObserver(boxElement);

			}
		},
		false,
	);

	function createObserver(boxElement) {
		let observer;

		let options = {
			root: null,
			rootMargin: "0px",
			threshold: buildThresholdList(), // Adjust threshold as needed
		};

		observer = new IntersectionObserver(handleIntersect, options);

		observer.observe(boxElement);
	}

	function handleIntersect(entries, observer) {
		entries.forEach((entry) => {
			// Check if the entry is intersecting
			// The entry.intersectionRatio > 0.9 condition is to avoid some cases when prevRatio is greater but the element is still in view
			if ((entry.intersectionRatio >= prevRatio[entry.target.id] || entry.intersectionRatio > 0.9) && entry.intersectionRatio > 0.1) {
				console.log("on view", entry.target.id, entry.intersectionRatio, prevRatio[entry.target.id]);
				const button = document.getElementsByClassName(
					`navbar-item ${entry.target.id}`,
				)[0];
				button && button.classList.add("active");
				console.log(`Adding active class to ${entry.target.id}`);
			} else {
				console.log("NOT on view",  entry.target.id, entry.intersectionRatio, prevRatio[entry.target.id])

				const button = document.getElementsByClassName(
					`navbar-item ${entry.target.id}`,
				)[0];
				button && button.classList.remove("active");
				console.log(`Remove active class to ${entry.target.id}`);
			}

			prevRatio[entry.target.id] = entry.intersectionRatio;
		});
	}

	function buildThresholdList() {
		let thresholds = [];
		let numSteps = 20;

		for (let i = 1.0; i <= numSteps; i++) {
			let ratio = i / numSteps;
			thresholds.push(ratio);
		}

		thresholds.push(0);
		return thresholds;
	}
</script>
